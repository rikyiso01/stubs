from sqlalchemy.engine.result import ScalarResult
from sqlalchemy.engine.cursor import CursorResult
from sqlalchemy.engine.base import Engine
from sqlalchemy.orm.decl_api import Base
from contextlib import AbstractContextManager
from typing import Type, Any
from sqlalchemy.sql.elements import TextClause
from sqlalchemy.sql.selectable import Select
from sqlalchemy.orm.query import Query
from sqlalchemy import Table
from types import TracebackType

_Stmt = TextClause | Select

class Session(AbstractContextManager[Session]):
    def __init__(self, engine: Engine) -> None: ...
    def commit(self) -> None: ...
    def add_all(self, instances: list[Base]) -> None: ...
    def add(self, instance: Base) -> None: ...
    def execute(self, statement: _Stmt) -> CursorResult: ...
    def scalar(self, statement: _Stmt) -> Any: ...
    def scalars(self, statement: _Stmt) -> ScalarResult: ...
    def query(self, table: Table) -> Query: ...
    def flush(self) -> None: ...
    def __exit__(
        self,
        __exc_type: Type[BaseException] | None,
        __exc_value: BaseException | None,
        __traceback: TracebackType | None,
        /,
    ) -> (bool | None): ...

def declarative_base() -> Type[Base]: ...
