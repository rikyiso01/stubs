from typing import Literal, TypeVar
from collections.abc import Iterable

_T = TypeVar("_T", str, int, list[str], tuple[str, ...])

def b64d(s: str) -> bytes: ...
def b64e(s: bytes) -> str: ...
def rol(n: _T) -> _T: ...

ror = rol

def unhex(s: str) -> bytes: ...
def enhex(x: bytes) -> str: ...
def xor(
    *args: bytes, cut: Literal["min", "max", "left", "right"] | int = ...
) -> bytes: ...
def urlencode(s: str) -> str: ...
def urldecode(s: str, ignore_invalid: bool = ...) -> str: ...
def bits(s: bytes | int, endian: Literal["little", "big"] = ...) -> list[int]: ...
def unbits(s: Iterable[int], endian: Literal["little", "big"] = ...) -> bytes: ...
