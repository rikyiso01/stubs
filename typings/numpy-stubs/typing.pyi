from typing import Generic, TypeVar, Protocol, Any, overload
from collections.abc import Iterator

_T = TypeVar("_T")
_T_cov = TypeVar("_T_cov", covariant=True)
_T_contra = TypeVar("_T_contra", contravariant=True)

class _Array(Protocol[_T_cov]):
    def __array__(self) -> _NDArray[_T_cov]: ...

ArrayLike = list[_T] | tuple[_T, ...] | _Array[_T]
DTypeLike = TypeVar("DTypeLike", int, float)
_V = TypeVar("_V", int, float)

class _NDArray(Generic[_T_cov]): ...

class NDArray(Generic[_T], _NDArray[_T]):
    def min(self: NDArray[DTypeLike]) -> DTypeLike: ...
    def sum(self: NDArray[DTypeLike]) -> DTypeLike: ...
    def __array__(self) -> NDArray[_T]: ...
    def mean(self: NDArray[DTypeLike]) -> float: ...
    def var(self: NDArray[DTypeLike], *args: None, ddof: int = ...) -> float: ...
    def all(self: NDArray[DTypeLike]) -> bool: ...
    def any(self: NDArray[DTypeLike]) -> bool: ...
    def __add__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __radd__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __sub__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rsub__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __mul__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rmul__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __truediv__(self, other: ArrayLike[float] | float, /) -> NDArray[float]: ...
    def __rtruediv__(self, other: ArrayLike[float] | float, /) -> NDArray[float]: ...
    def __matmul__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rmatmul__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __floordiv__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rfloordiv__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __mod__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rmod__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __pow__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rpow__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __and__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rand__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __or__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __ror__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __xor__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rxor__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __divmod__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __rdivmod__(
        self: NDArray[DTypeLike], other: ArrayLike[_V] | _V, /
    ) -> NDArray[DTypeLike | _V]: ...
    def __lt__(self, other: ArrayLike[float] | float, /) -> NDArray[bool]: ...
    def __gt__(self, other: ArrayLike[float] | float, /) -> NDArray[bool]: ...
    def __le__(self, other: ArrayLike[float] | float, /) -> NDArray[bool]: ...
    def __ge__(self, other: ArrayLike[float] | float, /) -> NDArray[bool]: ...
    def __eq__(self, other: Any) -> NDArray[bool]: ...
    def __ne__(self, other: Any) -> NDArray[bool]: ...
    def __pos__(self) -> NDArray[_T]: ...
    def __abs__(self: NDArray[DTypeLike]) -> NDArray[DTypeLike]: ...
    def __neg__(self: NDArray[DTypeLike]) -> NDArray[DTypeLike]: ...
    def __invert__(self: NDArray[int]) -> NDArray[int]: ...
    def __bytes__(self) -> bytes: ...
    def __len__(self) -> int: ...
    @overload
    def __getitem__(self, key: int, /) -> _T: ...
    @overload
    def __getitem__(self, key: slice | ArrayLike[bool], /) -> NDArray[_T]: ...
    @overload
    def __setitem__(self, key: int, value: _T, /) -> None: ...
    @overload
    def __setitem__(
        self, key: slice | ArrayLike[bool], value: ArrayLike[_T] | _T, /
    ) -> None: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __containes__(self, other: _T) -> bool: ...
    def cumsum(self) -> NDArray[DTypeLike]: ...
