from .typing import NDArray, ArrayLike, DTypeLike
from typing import TypeVar, overload, BinaryIO, Type, Any
from pathlib import Path

_T = TypeVar("_T")

@overload
def array(object: ArrayLike[_T]) -> NDArray[_T]: ...
@overload
def array(object: range) -> NDArray[int]: ...
def sum(a: ArrayLike[DTypeLike]) -> DTypeLike: ...
def min(a: ArrayLike[DTypeLike]) -> DTypeLike: ...
def mean(a: ArrayLike[DTypeLike]) -> float: ...
def average(a: ArrayLike[DTypeLike]) -> float: ...
def var(a: ArrayLike[DTypeLike], *args: None, ddof: int = ...) -> float: ...
def save(file: str | Path | BinaryIO, arr: ArrayLike[Any]) -> None: ...
@overload
def zeros(shape: int) -> NDArray[float]: ...
@overload
def zeros(shape: int, dtype: Type[DTypeLike]) -> NDArray[DTypeLike]: ...
@overload
def arange(stop: DTypeLike) -> NDArray[DTypeLike]: ...
@overload
def arange(
    start: DTypeLike, stop: DTypeLike, step: DTypeLike = ...
) -> NDArray[DTypeLike]: ...
def load(file: str | Path | BinaryIO) -> NDArray[Any]: ...
def all(a: ArrayLike[DTypeLike]) -> bool: ...
def any(a: ArrayLike[DTypeLike]) -> bool: ...
def linspace(
    start: ArrayLike[DTypeLike] | DTypeLike,
    stop: ArrayLike[DTypeLike] | DTypeLike,
    num: int = ...,
) -> NDArray[float]: ...
@overload
def exp(x: ArrayLike[DTypeLike]) -> NDArray[float]: ...
@overload
def exp(x: DTypeLike) -> float: ...
def cumsum(a: ArrayLike[DTypeLike] | DTypeLike) -> NDArray[DTypeLike]: ...
