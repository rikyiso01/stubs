from __future__ import annotations
from typing import TypeVar, Any
from typing_extensions import TypeVarTuple
from collections.abc import Callable

T = TypeVar("T")
T_co = TypeVar("T_co", covariant=True)
T_con = TypeVar("T_con", contravariant=True)
T2 = TypeVar("T2")
T2_co = TypeVar("T2_co", covariant=True)
T2_con = TypeVar("T2_con", contravariant=True)
K = TypeVar("K")
K_con = TypeVar("K_con", contravariant=True)
K_co = TypeVar("K_co", covariant=True)
K2 = TypeVar("K2")
K2_con = TypeVar("K2_con", contravariant=True)
K2_co = TypeVar("K2_co", covariant=True)
K3 = TypeVar("K3")
K3_con = TypeVar("K3_con", contravariant=True)
K3_co = TypeVar("K3_co", covariant=True)
V = TypeVar("V")
V_co = TypeVar("V_co", covariant=True)
V_con = TypeVar("V_con", contravariant=True)
V2 = TypeVar("V2")
V2_co = TypeVar("V2_co", covariant=True)
V2_con = TypeVar("V2_con", contravariant=True)

I = TypeVar("I", bound=int)
I_co = TypeVar("I_co", covariant=True, bound=int)
I_con = TypeVar("I_con", contravariant=True, bound=int)
I2 = TypeVar("I2", bound=int)
I2_co = TypeVar("I2_co", covariant=True, bound=int)
I2_con = TypeVar("I2_con", contravariant=True, bound=int)
F = TypeVar("F", bound=float)
F_co = TypeVar("F_co", covariant=True, bound=float)
F_con = TypeVar("F_con", contravariant=True, bound=float)
F2 = TypeVar("F2", bound=float)
F2_co = TypeVar("F2_co", covariant=True, bound=float)
F2_con = TypeVar("F2_con", contravariant=True, bound=float)
C = TypeVar("C", bound=complex)
C_co = TypeVar("C_co", covariant=True, bound=complex)
C_con = TypeVar("C_con", contravariant=True, bound=complex)
C2 = TypeVar("C2", bound=complex)
C2_co = TypeVar("C2_co", covariant=True, bound=complex)
C2_con = TypeVar("C2_con", contravariant=True, bound=complex)

TT = TypeVarTuple("TT")

Func = TypeVar("Func", bound="Callable[..., Any]")
Func_co = TypeVar("Func_co", covariant=True, bound="Callable[..., Any]")
Func_con = TypeVar("Func_con", contravariant=True, bound="Callable[..., Any]")
