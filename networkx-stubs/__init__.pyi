from collections.abc import Iterable, Iterator, Mapping
from typing import Any, overload, Hashable, Self
from networkx.classes.coreviews import AtlasView

from networkx.classes.reportviews import EdgeView, NodeView
from matplotlib.colors import Colormap

class Graph[N: Hashable]:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        incoming_graph_data: Iterable[tuple[N, N]] | Mapping[N, Iterable[N]] | Graph[N],
    ) -> None: ...
    def add_node(self, node_for_adding: N, **kwargs: Any) -> None: ...
    def add_nodes_from(self, nodes_for_adding: Iterable[N]) -> None: ...
    def add_edge(self, u_of_edge: N, v_of_edge: N, **kwargs: Any) -> None: ...
    def add_edges_from(self, ebunch_to_add: Iterable[tuple[N, N]]) -> None: ...
    def nodes(self) -> NodeView[N]: ...
    def edges(self) -> EdgeView[N]: ...
    def __iter__(self) -> Iterator[N]: ...
    def __getitem__(self, item: N) -> AtlasView[N]: ...
    def __len__(self) -> int: ...
    def copy(self) -> Self: ...
    def remove_node(self, n: N) -> None: ...
    def remove_nodes_from(self, nodes: Iterable[N]) -> None: ...
    def remove_edge(self, u: N, v: N) -> None: ...
    def remove_edges_from(self, ebunch: Iterable[tuple[N, N]]) -> None: ...
    @overload
    def degree(self) -> Mapping[N, int]: ...
    @overload
    def degree(self, nbunch: N) -> int: ...

class DiGraph[N: Hashable](Graph[N]):
    @overload
    def in_degree(self) -> Mapping[N, int]: ...
    @overload
    def in_degree(self, nbunch: N) -> int: ...
    @overload
    def out_degree(self) -> Mapping[N, int]: ...
    @overload
    def out_degree(self, nbunch: N) -> int: ...

class MultiGraph[N: Hashable](Graph[N]): ...
class MultiDiGraph[N: Hashable](DiGraph[N], MultiGraph[N]): ...

@overload
def scale_free_graph(
    n: int,
    alpha: float = ...,
    beta: float = ...,
    gamma: float = ...,
    delta_in: float = ...,
    delta_out: float = ...,
    seed: int | None = ...,
) -> MultiDiGraph[int]: ...
@overload
def scale_free_graph[
    N
](
    n: int,
    alpha: float = ...,
    beta: float = ...,
    gamma: float = ...,
    delta_in: float = ...,
    delta_out: float = ...,
    seed: int | None = ...,
    *,
    initial_graph: MultiDiGraph[N],
) -> MultiDiGraph[N]: ...
def closeness_centrality[N](G: Graph[N]) -> dict[N, float]: ...

type _Color = float | tuple[float, float, float, float]
type _Specifier[N, T] = T | Mapping[N, T] | Iterable[T]

def draw[
    N
](
    G: Graph[N],
    pos: dict[N, tuple[float, float]] = ...,
    *,
    node_size: _Specifier[N, int] = ...,
    node_color: _Specifier[N, _Color] = ...,
    edge_color: _Specifier[N, _Color] = ...,
    cmap: Colormap = ...,
    linewidths: float = ...,
    margins: tuple[float, float] = ...,
    arrowsize: int = ...,
) -> None: ...
def weakly_connected_components[
    N
](G: DiGraph[N] | MultiDiGraph[N]) -> Iterator[set[N]]: ...
def diameter(G: Graph[Any]) -> int: ...
def betweenness_centrality[N](G: Graph[N]) -> dict[N, float]: ...
def selfloop_edges[N](G: Graph[N]) -> Iterator[tuple[N, N]]: ...
def spring_layout[
    N
](G: Graph[N], k: float | None = ..., seed: int | None = ...) -> dict[
    N, tuple[float, float]
]: ...
