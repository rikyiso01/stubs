from typing import Literal, AnyStr, overload
from collections.abc import Iterator
from mte.typevar import T

class BeautifulSoup(Tag):
    def __init__(self, markup: AnyStr, *, features: Literal["html.parser"]) -> None: ...

class Tag:
    def __call__(
        self, name: str = ..., attrs: dict[str, str] = ..., recursive: bool = ...
    ) -> list[Tag]: ...
    def find_all(
        self, name: str = ..., attrs: dict[str, str] = ..., recursive: bool = ...
    ) -> list[Tag]: ...
    def __getitem__(self, item: str) -> str: ...
    def prettify(self) -> str: ...
    @property
    def text(self) -> str: ...
    def __iter__(self) -> Iterator[Tag | str]: ...
    @overload
    def get(self, key: str) -> str: ...
    @overload
    def get(self, key: str, default: T) -> str | T: ...
    def find(
        self, name: str = ..., attrs: dict[str, str] = ..., recursive: bool = ...
    ) -> Tag | None: ...
    def __getattr__(self, item: str) -> Tag | None: ...
    def __len__(self) -> int: ...
