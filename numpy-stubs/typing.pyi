from typing import Generic, TypeVar, Protocol, Any, Type
from collections.abc import Iterator, Sequence

DTypeLike = float | str

_T = TypeVar("_T", bound=DTypeLike)
_T_cov = TypeVar("_T_cov", covariant=True, bound=DTypeLike)
_T2 = TypeVar("_T2", bound=DTypeLike)

class _Array(Protocol[_T_cov]):
    def __array__(self) -> _NDArray[_T_cov]: ...

class _NDArray(Generic[_T_cov]):
    def __array__(self) -> NDArray[_T_cov]: ...

ArrayLike = Sequence[ArrayLike[_T]] | _Array[_T] | _T
_V = TypeVar("_V", bound=float)
_V2 = TypeVar("_V2", bound=float)

class NDArray(Generic[_T], _NDArray[_T]):
    def min(self: NDArray[_V]) -> _V: ...
    def max(self: NDArray[_V]) -> _V: ...
    def sum(self: NDArray[_V]) -> _V: ...
    def __array__(self) -> NDArray[_T]: ...
    def mean(self: NDArray[_V]) -> float: ...
    def var(self: NDArray[_V], *, ddof: int = ...) -> float: ...
    def all(self: NDArray[_V]) -> bool: ...
    def any(self: NDArray[_V]) -> bool: ...
    def __add__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __radd__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __sub__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rsub__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __mul__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rmul__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __truediv__(self, other: ArrayLike[float], /) -> NDArray[float]: ...
    def __rtruediv__(self, other: ArrayLike[float], /) -> NDArray[float]: ...
    def __matmul__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __rmatmul__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __floordiv__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __rfloordiv__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __mod__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rmod__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __pow__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rpow__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __and__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rand__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __or__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __ror__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __xor__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __rxor__(self: NDArray[_V], other: ArrayLike[_V2], /) -> NDArray[_V | _V2]: ...
    def __divmod__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __rdivmod__(
        self: NDArray[_V], other: ArrayLike[_V2], /
    ) -> NDArray[_V | _V2]: ...
    def __lt__(self, other: ArrayLike[_V], /) -> NDArray[bool]: ...
    def __gt__(self, other: ArrayLike[_V], /) -> NDArray[bool]: ...
    def __le__(self, other: ArrayLike[_V], /) -> NDArray[bool]: ...
    def __ge__(self, other: ArrayLike[_V], /) -> NDArray[bool]: ...
    def __eq__(self, other: Any) -> NDArray[bool]: ...
    def __ne__(self, other: Any) -> NDArray[bool]: ...
    def __pos__(self) -> NDArray[_T]: ...
    def __abs__(self: NDArray[_V]) -> NDArray[_V]: ...
    def __neg__(self: NDArray[_V]) -> NDArray[_V]: ...
    def __invert__(self: NDArray[int]) -> NDArray[int]: ...
    def __bytes__(self) -> bytes: ...
    def __len__(self) -> int: ...
    def __getitem__(
        self, key: int | tuple[int, ...] | slice | ArrayLike[bool], /
    ) -> NDArray[_T]: ...
    def __setitem__(
        self,
        key: int | tuple[int, ...] | slice | ArrayLike[bool],
        value: ArrayLike[_T],
        /,
    ) -> None: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __containes__(self, other: _T) -> bool: ...
    def __bool__(self) -> bool: ...
    def __int__(self: NDArray[_V]) -> int: ...
    def __complex__(self: NDArray[_V]) -> complex: ...
    def __float__(self: NDArray[_V]) -> float: ...
    def __supportsIndex__(self: NDArray[bool] | NDArray[int]) -> int: ...
    def cumsum(self) -> NDArray[_T]: ...
    shape: tuple[int, ...]
    def astype(self, dtype: Type[_T2]) -> NDArray[_T2]: ...
