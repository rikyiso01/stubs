from contextlib import AbstractAsyncContextManager
from types import TracebackType

_JsonType = dict[str, _JsonType] | list[_JsonType] | int | str | float | None | bool

class Response:
    @property
    def text(self) -> str: ...
    @property
    def content(self) -> bytes: ...
    def json(self) -> _JsonType: ...

class AsyncClient(AbstractAsyncContextManager[AsyncClient]):
    async def get(
        self, url: str, *, data: dict[str, str] = ..., json: _JsonType = ...
    ) -> Response: ...
    async def post(
        self, url: str, *, data: dict[str, str] = ..., json: _JsonType = ...
    ) -> Response: ...
    def __aexit__(
        self,
        __exc_type: type[BaseException] | None,
        __exc_value: BaseException | None,
        __traceback: TracebackType | None,
    ) -> bool | None: ...

def get(url: str, *, data: dict[str, str] = ..., json: _JsonType = ...) -> Response: ...
def post(
    url: str, *, data: dict[str, str] = ..., json: _JsonType = ...
) -> Response: ...
