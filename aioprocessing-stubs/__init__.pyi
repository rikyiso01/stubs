from multiprocessing import _EventType, _LockType  # type: ignore
from multiprocessing import Process, Queue
from typing import TypeVar, Generic
from contextlib import AbstractAsyncContextManager

class AioProcess(Process):
    async def coro_join(self, timeout: float | None = ...) -> None: ...

T = TypeVar("T")

class AioQueue(Queue[T], Generic[T]):
    async def coro_get(self, block: bool = ..., timeout: float | None = ...) -> T: ...
    async def coro_put(
        self, obj: T, block: bool = ..., timeout: float | None = ...
    ) -> None: ...

class AioLock(_LockType, AbstractAsyncContextManager[bool]):
    def __init__(self) -> None: ...

class AioEvent(_EventType):
    def __init__(self) -> None: ...
    async def coro_wait(self, timeout: float | None = ...) -> None: ...
